@page "/login"
@inject HttpClient Http
@inject CustomAuthStateProvider AuthProvider
@inject NavigationManager NavManager

<h3>Giriş Yap</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="form-group mb-2">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    <div class="form-group mb-2">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Giriş Yap</button>
</EditForm>

@code {
    private LoginRequest loginModel = new();
    private string errorMessage;

    private class LoginRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private class LoginResponse
    {
        public string AccessToken { get; set; }
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await AuthProvider.MarkUserAsAuthenticated(result.AccessToken);
                NavManager.NavigateTo("/"); 
            }
            else
            {
                errorMessage = "Giriş başarısız. Lütfen bilgilerinizi kontrol edin.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Giriş sırasında bir hata oluştu.";
        }
    }
}