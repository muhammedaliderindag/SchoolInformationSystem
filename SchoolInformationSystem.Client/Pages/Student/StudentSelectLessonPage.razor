@page "/student/selectlesson"
@inject HttpClient Http
@inject CustomAuthStateProvider AuthProvider
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using SchoolInformationSystem.Client.DTOs

@attribute [Authorize]
<PageTitle>Lesson Select</PageTitle>

<div class="d-flex justify-content-center">
    <div class="d-block" style="width:100%">
        <div class="m-1 text-center">
            <h1>Ders Bilgileri</h1>
        </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover table-bordered">


                    <thead class="table-dark">
                        <tr>
                            <th scope="col" style="width: 15%;">Ders Kodu</th>
                            <th scope="col" style="width: 15%;">Ders Adı</th>
                            <th scope="col" style="width: 15%;">Kredi</th>
                            <th scope="col" style="width: 15%;">AKTS</th>
                            <th scope="col" style="width: 15%;">Ders Hocası</th>
                            <th scope="col" style="width: 15%;">Derslik</th>
                            <th scope="col" style="width: 10%;" class="text-center">Ekle</th>
                        </tr>
                    </thead>


                    <tbody>

                    @foreach (var lesson in LessonList)
                            {
                                <tr>
                            <th scope="row">@lesson.LessonId</th>
                            <td>@lesson.LessonName</td>
                            <td>@lesson.Credit</td>
                            <td>@lesson.Akts</td>
                            <td>@lesson.TeacherName</td>
                            <td>@lesson.ClassId</td>
                            @if (lesson.Added == 0)
                            {
                                <td class="text-center">

                                    <a class="btn btn-sm btn-outline-primary" @onclick="() => HandleAdd(lesson)">Ekle</a>
                                </td>
                            }
                            else if (lesson.Added == 1)
                            {
                                <td class="text-center">
                                    <a class="btn btn-sm btn-outline-primary" @onclick="() => HandleAdd(lesson)">Çıkart</a>
                                </td>
                            }
                        </tr>
                            }
@*                         <tr>
                            <th scope="row">501</th>
                            <td>Calculus</td>
                            <td>5</td>
                            <td>5</td>
                            <td>Ahmet Günebatan</td>
                            <td>101</td>
                            <td class="text-center">
                                <a class="btn btn-sm btn-outline-primary" href="/studentoverview/edit/">
                                    Edit
                                </a>
                            </td>
                        </tr> *@
                    </tbody>
                </table>
            </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {

            <div class="alert alert-danger">@errorMessage</div>

        }

    </div>
</div>

@code {


    private string? errorMessage;
    private List<LessonList> LessonList = new List<LessonList>();
    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User; 


        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                LessonList = await Http.GetFromJsonAsync<List<LessonList>>("api/Student/getLessons");
            }
            // else
            // {
            //     errorMessage = $"ID bulunamadı.";
            // }
        }
        else
        {
            // Kullanıcı oturum açmamış, bu durumu yönetin (login sayfasına yönlendirme vb.)
            NavManager.NavigateTo("/login");
        }
    }

    private async Task HandleAdd(LessonList lessonToUpdate)
    {
        try
        {
            if (lessonToUpdate != null && lessonToUpdate.Added == 0)
            {
                lessonToUpdate.Added = 1;
            }
            else if (lessonToUpdate != null && lessonToUpdate.Added == 1)
            {
                lessonToUpdate.Added = 0;
            }
            else
            {
                errorMessage = "Liste boş geldi.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Bir hata oluştu.";
        }
    }

}